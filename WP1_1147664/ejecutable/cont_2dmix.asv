% We consider the 2-D version of the above problem in a square domain
% Omega =(a,b)×(a,b) subset in R^2.
% We assume that the control is located at two adjacent sides of the boundary
% of Omega, that we denote by Gamma_1.

% The control problem reads as follows: given T>0 and the initial data (u^0,u^1)
% in L^2(Omega)× H^(-1)(Omega), find v(x,t) in L^2(Gamma_1 x(0,T)) such
% that the solution u of the constant coefficient 2-D wave system:
%           u_(tt)- Laplacian (u) =0    in Omega x(0,T)
%           u(x,t)=0                    on Gamma_0 = Gamma\Gamma_1, 0<t<T
%           u(x,t)=v(x,t)               on Gamma_1, 0<t<T
%           u(x,0)=u^0(x),      u_t (x,0)=u^1(x)    in Omega
% satisfies
%           u(x,T)=u_t (x,T)=0,     x in Omega.

% Parameters of entry:
% a = left wing of the interval
% b = right wing of the interval
% J = number of interior points in the variable x
% mu = number of courant
% T = final time 
% epstest = tolerance
% U01= final position
% U11= final speed

% Parameters of exit:
% controlex = control of problem
% Test = norm of the solutions
% temps = final time in the step, temps=n*dt
% ek01fg =  data e^0_0 in step k
% ek11fg =  data e^1_0 in step k      



function [controlex,Test,temps,ek01,ek11]=cont_2dmix(a,b,J,mu,T,epstest,U01,U11)

format long;
% h = distance between two consecutive points (space)
% x,y = spatial coordinates of the nodes
% limite = condition of stop, maximum number of iterations
% dt = distance between two consecutive points (time)
% N = number of points in the temporary variable

%-------------------------------------------------------------------------
% PARAMETRES DIVERS
%-------------------------------------------------------------------------

%********************* test d'arret du gradient **************************

%echelle=5.;
PAUSE=0.001;
limite = 100;

%-------------------------------------------------------------------------
% PARAMETRIZE FOR THE MESHING
%-------------------------------------------------------------------------

h = 1/(J+1);
x = 0:h:1;
y = x;

[X,Y] = meshgrid(x,y);
Y=flipud(Y);
G = numgrid('S',J+2);

%-------------------------------------------------------------------------
% CONDITION C.F.L. OF THE SCHEME ( 2,2 ) RESOLVING THE SYSTEM 
%-------------------------------------------------------------------------

dt = mu*h;

%-------------------------------------------------------------------------
% The TIME T to which the system must be stabilized
%-------------------------------------------------------------------------


N = ceil(T/dt);
T=N*dt;

r0 = (dt/h)^2;
time1=cputime;
%--------------------------------------------------------------------------
% RESOLUTION FOR PHI_0 OF THE EQUATION 
%       (d^2/dt^2 - Laplacian )phi_0 =0     in Omega x(0,T)
%       phi_0=0                             on Gamma x(0,T)
%       phi_0(0)=e^0_0,     (d/dt)phi_0(0)=e^1_0    in Omega.  
% WITH ONE CONDITIONS OF EDGE INVALID AND INITIALIZED BY 
%       phi_0(t=0)=0     and    (d/dt)phi_0(t=0)=0
%--------------------------------------------------------------------------

[M1,M2] = matrsc_mix2d(G,J,r0);
ek01 = zeros(J+2);
ek11 = ek01;

[phik1N,phik1Np1] = forwardA1(X,Y,G,J,dt,N,M1,ek01,ek11);
          
%---------------------------------------------------------------------------
% RESOLUTION FOR PSI_0 OF THE EQUATION 
%       (d^2/dt^2 - Laplacian )psi_0 =0     in Omega x(0,T)
%       psi_0= (d/dn) phi_0                 on Gamma_1 x(0,T)
%       psi_0(T)=0,     (d/dt)psi_0(T)=0    in Omega.  
%---------------------------------------------------------------------------

%*********************** Case n=N == > calculation of psi_0 (N-1)***********

%**********************************
% Calculation of psi_0 in time N  *
%**********************************

[c1] = controle2d(phik1N,h,J,G,1);
double(c1);

%***********************************
% Calculation of psi_0 in time N-1 *
%***********************************

[bc1] = bdycond2d(c1,X,Y,G,r0,h,J);
double(bc1);
bc1=M2*bc1;
psik1Nm1 = bc1/2;

phik1np2 = phik1Np1; phik1np1 = phik1N; 
psik1np1 = zeros(J^2,1); 
psik1n = psik1Nm1; 

for n = N-1:-1:0

%*********************** Case n<N ==> calculation of psi_0 (n-1)************

%*********************************
% Calculation of phi_0 in time n *
%*********************************

[phik1n] = phibackA1(n,dt,J,G,M1,phik1np2,phik1np1);

%**********************************
% Calculation of psi_0 in time n-1 *
%**********************************

[c1] = controle2d(phik1n,h,J,G,1);
[bc1] = bdycond2d(c1,X,Y,G,r0,h,J);
bc1=M2*bc1;
[psik1nm1] = psibackA1(M1,bc1,psik1np1,psik1n);

%************************************************
% Preparation of the next passage in the buckle *
%************************************************

phik1np2 = phik1np1; phik1np1=phik1n;
psik1np1 = psik1n; psik1n = psik1nm1;

if n==1

% Saving of psi in time 1 for the calculation of (d/dt)psi(t=0)
  psik11 = psik1np1;

end %if

end %for

%------------------------------------------------------------------------
% Calculation of residues g0 and g1
%------------------------------------------------------------------------

smbre1 = h^2*((psik11-psik1n)/(2*dt) - U11(G>0)) ;

D = delsq(G);

gk01 = D\smbre1;

%gk11 = U01 - psik1np1;
%gk12 = U02 - psik2np1;

% Put under matrix shape of g0 and g1

Gk01 = zeros(J+2);
Gk01(G>0) = full(gk01(G(G>0)));

Gk11 = zeros(J+2);
u01 =  U01(G>0);
Gk11(G>0) = full(u01(G(G>0))-psik1np1(G(G>0)));
%Gk11 = Gk11 + U01;
clear u01;

% Norm of (g0,g1)

normg0 = sqrt(prosca2d(Gk01,Gk11,Gk01,Gk11,x,J,h,G,X,Y) );
normgk = normg0;

%---------------------------------------------------
% Calculation of the new direction of descent
%---------------------------------------------------

Wk01=Gk01; Wk11=Gk11;

test = normg0^2/(normel22d(U01,J,h)^2+normehm12d(U11(G>0),D,G,J,x,y,h)^2);

passage = 0;
Test = test;

while (test > epstest) & (passage<limite)

%**************************************************************************
%**************************************************************************
%**									 **
%**				STAGE 1					 **
%**									 **
%**		       	DESCENT					 **
%**									 **
%**************************************************************************
%**************************************************************************



%--------------------------------------------------------------------------
% RESOLUTION FOR PHI_k OF THE EQUATION 
%       (d^2/dt^2 - Laplacian )phi_k =0     in Omega x(0,T)
%       phi_k=0                             on Gamma x(0,T)
%       phi_k(0)=w^0_k,     (d/dt)phi_k(0)=w^1_k    in Omega.  
%--------------------------------------------------------------------------

[phibk1N,phibk1Np1] = forward2d(X,Y,G,J,dt,N,M1,Wk01,Wk11);

%---------------------------------------------------------------------------
%	RESOLUTION POUR PSIBK DE L'EQUATION D'ELASTICITE AVEC DES 
% CONDITIONS DE BORD NON NULLES ET INITIALISEE PAR psibk(t=T)=0 et dpsibk(t=T)=0
%---------------------------------------------------------------------------

%*********************** cas n=N ==> calcul de psi0(N-1) *******************

%			**********************************
%			*   Calcul de psibk sur domega   *
%			*    	   au temps N		         *
%			**********************************

[c1] = controle2d(phibk1N,h,J,G,1);

%			*********************************
%			*   Calcul de psi0 au temps N-1 *
%			*********************************

[bc1] = bdycond2d(c1,X,Y,G,r0,h,J);
bc1=M2*bc1;
psibk1Nm1 = bc1/2;

phibk1np2 = phibk1Np1; phibk1np1 = phibk1N; 
psibk1np1 = zeros(J^2,1); psibk1n = psibk1Nm1; 

for n = N-1:-1:0

%*********************** cas n<N ==> calcul de psi0(n-1) *******************

%			*********************************
%			*   Calcul de phi0 au temps n   *
%			*********************************

[phibk1n] = phiback2d(n,dt,J,G,M1,phibk1np2,phibk1np1);

%			*********************************
%			*   Calcul de psibk au temps n-1 *
%			*********************************

[c1] = controle2d(phibk1n,h,J,G,1);

[bc1] = bdycond2d(c1,X,Y,G,r0,h,J);
bc1=M2*bc1;
[psibk1nm1] = psiback2d(M1,bc1,psibk1np1,psibk1n);

%			**********************************
%			* 	preparation du prochain    *
%			* 	passage dans la boucle	   *
%			**********************************

phibk1np2 = phibk1np1; phibk1np1=phibk1n;
psibk1np1 = psibk1n; psibk1n = psibk1nm1;

if n==1

% sauvegarde de psi au temps 1 pour le calcul de dtpsi(t=0)
  psibk11 = psibk1np1;

end %if
end %for

%------------------------------------------------------------------------
% Calcul des résidus g0 et g1
%------------------------------------------------------------------------

smbre1 = h^2*(psibk11-psibk1n)/(2*dt);

gbk01 = D\smbre1;

% mise sous forme matricielle avec les valeurs au bord du domaine

Gbk01 = zeros(J+2);
Gbk01(G>0) = full(gbk01(G(G>0)));

Gbk11 = zeros(J+2);
Gbk11(G>0) = full(-psibk1np1(G(G>0)));

ps = prosca2d(Gbk01,Gbk11,Wk01,Wk11,x,J,h,G,X,Y);
rhok = normgk^2/ps;

%----------------------------------------------------------------
% Actualisation des variables pour le prochain 
% passage dans la boucle
%----------------------------------------------------------------

% actualisation de e^k
ek01 = ek01 - rhok*Wk01;
ek11 = ek11 - rhok*Wk11;

% actualisation de g^k
Gk01 = Gk01 - rhok*Gbk01;
Gk11 = Gk11 - rhok*Gbk11;

%**************************************************************************
%**************************************************************************
%**									 **
%**				ETAPE 2					 **
%**									 **
%**		       	CONVERGENCE					 **
%**									 **
%**************************************************************************
%**************************************************************************

normgkp1 = sqrt( prosca2d(Gk01,Gk11,Gk01,Gk11,x,J,h,G,X,Y) );

test = ( normgkp1/normg0 )^2;
Test=[Test;test];

gammak = ( normgkp1/normgk )^2;

Wk01 = Gk01 + gammak*Wk01;
Wk11 = Gk11 + gammak*Wk11;

normgk = normgkp1;

passage = passage+1;
disp('***********************************************');
disp(sprintf('iteration of gradient = %g',passage));
disp(sprintf('error (norm) = %g',test));
disp('***********************************************');

end %while

passage=passage+1;

if (test > epstest) & (passage > limite)
    [p] = error3;
    delete(p);
end

%**************************************************************************
%**************************************************************************
%**									 **
%**				CONTROLE					 **
%**									 **
%**************************************************************************
%**************************************************************************

[phik1N,phik1Np1] = forward2d(X,Y,G,J,dt,N,M1,ek01,ek11);

%---------------------------------------------------------------------------
%	RESOLUTION POUR PSI0 DE L'EQUATION D'ELASTICITE AVEC DES 
% CONDITIONS DE BORD NON NULLES ET INITIALISEE PAR psi0(t=T)=0 et dphi0(t=T)=0
%---------------------------------------------------------------------------

%*********************** cas n=N ==> calcul de psi0(N-1) *******************

%			*********************************
%			*   Calcul de psi0 sur domega   *
%			*    	   au temps N		*
%			*********************************

[c1] = controle2d(phik1N,h,J,G,1);

%			*********************************
%			* Calcul de la norme L2(domega) *
%			*	   du controle		  *
%			*********************************

normecontr = nl2domeg2d(c1,X,Y,J,h);
temps = N*dt;

%			*********************************
%			*   Calcul de psi0 au temps N-1 *
%			*********************************

[bc1] = bdycond2d(c1,X,Y,G,r0,h,J);
psik1Nm1 = bc1/2;
bc1=M2*bc1;

phik1np2 = phik1Np1; phik1np1 = phik1N; 
psik1np1 = zeros(J^2,1); psik1n = psik1Nm1; 

for n = N-1:-1:0

%*********************** cas n<N ==> calcul de psi0(n-1) *******************

%			*********************************
%			*   Calcul de phi0 au temps n   *
%			*********************************

[phik1n] = phiback2d(n,dt,J,G,M1,phik1np2,phik1np1);

%			*********************************
%			*   Calcul de psi0 au temps n-1 *
%			*********************************

[c1] = controle2d(phik1n,h,J,G,1);

%			*********************************
%			* Calcul de la norme L2(domega) *
%			*	   du controle		  *
%			*********************************

normecontr = [normecontr;nl2domeg2d(c1,X,Y,J,h)];
temps = [temps;n*dt];

[bc1] = bdycond2d(c1,X,Y,G,r0,h,J);
bc1=M2*bc1;

[psik1nm1] = psiback2d(M1,bc1,psik1np1,psik1n);

%			**********************************
%			* 	preparation du prochain    *
%			* 	passage dans la boucle	   *
%			**********************************

phik1np2 = phik1np1; phik1np1=phik1n;
psik1np1 = psik1n; psik1n = psik1nm1;

if n==1

% sauvegarde de psi au temps 1 pour le calcul de dtpsi(t=0)
  psik11 = psik1np1;

end %if

end %for

time2=cputime-time1;

disp(sprintf('CPUTIME = %g seconde(s)', time2));
controlex=normecontr;
%end